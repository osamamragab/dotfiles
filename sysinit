#!/bin/sh
# vim: wrap
# shellcheck disable=SC2164

cdir="$(dirname "$(readlink -f "$0")")"
if [ -x "$cdir/setup.sh" ]; then
	echo "running dotfiles setup script..."
	"$cdir/setup.sh"
fi

[ -s "$cdir/.config/shell/profile" ] &&
	DISPLAY="${DISPLAY:-:0}" . "$cdir/.config/shell/profile"

if ! command -v doas >/dev/null 2>&1; then
	echo "installing doas..."
	sudo xbps-install -Sy opendoas
	echo "permit nopass keepenv :wheel" | sudo tee /etc/doas.conf >/dev/null
fi

level="${1:-0}"

xi() {
	name="$1"
	pkgs=""
	shift
	for pkg in "$@"; do
		case "$pkg" in
			-*)
				c="$(echo "$pkg" | tr -cd "-" | wc -c)"
				[ "$c" -eq "${#pkg}" ] && [ "$level" -lt "${#pkg}" ] && break
				;;
			*)
				pkgs="$pkgs $pkg"
				;;
		esac
	done
	[ -z "$pkgs" ] && return
	[ "$name" != "_" ] && echo "installing $name..."
	# shellcheck disable=SC2086
	doas xbps-install -Sy $pkgs
}

echo "updating system..."
doas xbps-install -Sy xbps
doas xbps-install -Syu

xi "x" \
	xorg xorg-server xinit libX11-devel libXft-devel libXinerama libXinerama-devel libXrandr libXrandr-devel mesa-dri mesa-vaapi

xi "filesystems support" \
	fuse fuse-exfat mtpfs simple-mtpfs ifuse

xi "network manager" \
	NetworkManager ufw

xi "build tools" \
	gcc git make pkg-config autoconf automake libtool

xi "general tools" \
	curl wget gnupg gnupg2 openssh pass passmenu keychain keepassxc rbw slop maim dunst util-linux xdg-utils xtools xbacklight xss-lock elogind polkit rtkit time bc entr snooze vsv mlocate fzy fzf ripgrep fd cronie libnotify xcompmgr xbanish urlview darkhttpd youtube-dl yt-dlp pam-gnupg wmctrl xdo xdotool xclip yank clipmenu xwallpaper pmount autofs tar bsdtar xz bzip2 zstd gzip zip unzip unar atool signify tlp tlp-rdw thermald delta highlight tig exiftool redshift newsboat calcurse srm trash-cli spt bat buku lftp xoris dragon rlwrap ntp bluez lprng lshw hwinfo sc-im firejail translate-shell inotify-tools earlyoom zbar qrencode mediainfo rsync \
	- android-tools youtube-viewer qemu arandr tree catimg mdp screenkey git-extras git-lfs fbida \
	-- scrcpy syncthing flatpak flatpak-builder tea glab github-cli pcmanfm xarchiver ffmpegthumbnailer gnome-epub-thumbnailer

xi "manual pages" \
	man-pages man-pages-posix

xi "shell & text editor" \
	zsh vim neovim tmux \
	- zsh-completions zsh-autosuggestions zsh-syntax-highlighting zsh-history-substring-search \
	-- tmate mosh ttyd

xi "audio tools" \
	alsa-utils alsa-plugins-pulseaudio pulseaudio pulseaudio-utils pamixer pulsemixer apulse

xi "multimedia tools" \
	ImageMagick ffmpeg mpv nsxiv zathura zathura-pdf-mupdf mupdf \
	- zathura-ps zathura-djvu playerctl mpv-mpris \
	-- gimp openshot audacity

xi "music players" \
	mpd mpc ncmpcpp

xi "system monitoring tools" \
	socklog socklog-void perf strace ltrace lm_sensors htop iftop iotop ctop powertop cpufrequtils mon bmon bandwhich speedtest-cli \
	- vnstat wavemon fio

xi "email tools" \
	neomutt msmtp isync notmuch

xi "chatting applications" \
	weechat \
	- weechat-lua weechat-python \
	-- tuir

xi "web browsers" \
	lynx w3m browsh tor \
	- amfora sacc \
	-- vimb lagrange ddgr

xi "torrent tools" \
	transmission rtorrent \
	- btfs

xi "programming stuff" \
	clang lld tcc go rustup zig python3 lua nodejs R perl ruby c gdb valgrind clang-analyzer rust-analyzer gopls python3-pip python3-pipx python3-pipenv luarocks pnpm binutils upx delve jq jo xxd ired
	rustup-init
go install -v golang.org/x/tools/gopls@latest github.com/google/pprof@latest github.com/securego/gosec@latest honnef.co/go/tools/cmd/staticcheck@latest
[ "$level" -gt 0 ] && xi _ clib elixir sbcl openjdk sbt clojure leiningen julia kotlin-bin gef radare2 postgresql13 mariadb sqlite redis usql flex bison byacc clang-tools-extra shellcheck shfmt pylint black python3-ipython python3-numpy python3-matplotlib python3-scipy python3-jupyter jupyterlab
if [ "$level" -gt 1 ]; then
	xi _ clisp erlang ctags grpc protobuf terraform tflint tokei misspell pgcli litecli dive bvi hyperfine svgcleaner
	go install -v google.golang.org/protobuf/cmd/protoc-gen-go@latest github.com/fullstorydev/grpcurl@latest github.com/timakin/bodyclose@latest
	pip install mycli
fi
cargo install cargo-edit cargo-update cargo-watch cargo-make rusty-tags stylua
pnpm add -g typescript eslint prettier @fsouza/prettierd typescript-language-server pyright lua-language-server surge
[ "$level" -gt 0 ] && pnpm add -g sass pug @vue/cli vls svelte-language-server vscode-langservers-extracted yaml-language-server emmet-ls
[ "$level" -gt 1 ] && pnpm add -g svgo ts-node nodemon http-server serve livereload
! command -v sdk >/dev/null 2>&1 && curl -fsSL https://get.sdkman.io | bash
! command -v bun >/dev/null 2>&1 && curl -fsSL https://bun.sh/install | bash
! command -v deno >/dev/null 2>&1 && curl -fsSL https://deno.land/x/install/install.sh | sh

xi "cheat sheet tools" \
	cheat tealdeer

xi "nix & docker" \
	nix docker docker-compose docker-credential-pass

xi "arduino" \
	- arduino-cli \
	-- arduino

xi "markup/latex tools" \
	pandoc groff mdocml lowdown \
	- texlive \
	-- texlive-full

xi "networking/testing tools" \
	nmap netcat lsof traceroute mtr wireshark termshark inetutils iputils net-tools bind-utils iperf3 arp-scan tcpreplay ettercap bettercap macchanger sqlmap wrk hey gping \
	- wireshark-qt netsniff-ng aircrack-ng proxychains-ng socat websocat \
	-- thc-hydra hashcat hashcat-utils radamsa nemesis urh sslscan
cargo install xh
pip install mitmproxy

xi "fonts" \
	font-ibm-plex-otf font-inconsolata-otf amiri-font fonts-croscore-ttf nerd-fonts-otf

PROGRAMSDIR="${PROGRAMSDIR:-$HOME/programs}"
[ -d "$PROGRAMSDIR" ] || mkdir -p "$PROGRAMSDIR"

xi "local apps' dependencies" \
	webkit2gtk-devel gcr-devel gst-libav gst-plugins-good1 farbfeld readline-devel editline-devel fribidi-devel

[ -x "$cdir/.local/bin/sysupdate" ] && "$cdir/.local/bin/sysupdate" local

[ "$PYENV_ROOT" ] && [ ! -d "$PYENV_ROOT" ] && [ -d "$PROGRAMSDIR/pyenv" ] &&
	ln -s "$PROGRAMSDIR/pyenv" "$PYENV_ROOT"

PACKERDIR="${PACKERDIR:-${XDG_DATA_HOME:-$HOME/.local/share}/nvim/site/pack/packer/start/packer.nvim}"
if [ ! -f "$PACKERDIR" ]; then
	echo "installing packer.nvim..."
	git clone --depth 1 "https://github.com/wbthomason/packer.nvim" "$PACKERDIR"
fi

if [ -f "/usr/lib/mpv-mpris/mpris.so" ] && [ ! -f "$HOME/.config/mpv/scripts/mpris.so" ]; then
	echo "linking mpv-mpris plugin..."
	[ -d "$HOME/.config/mpv/scripts" ] || mkdir -p "$HOME/.config/mpv/scripts"
	doas ln -s "/usr/lib/mpv-mpris/mpris.so" "$HOME/.config/mpv/scripts/mpris.so"
fi

echo "changing default shell to zsh..."
chsh -s "$(which zsh)"
